
\begin{tabularx}{\linewidth}{ @{}l r@{} }
\color[HTML]{1C033C} \textbf{\uline{\href{https://github.com/schummLee/selfmade}{SelfMade}}} \hfill \color[HTML]{371e77} Sep. 2022 \\[4pt]
\color[HTML]{371e77}\textbf{\textit{Educational Repository for Low-Level Programming (C)}} \hfill \color[HTML]{4B28A4} \textit{C, YouTube} \\[5pt]
\begin{minipage}[t]{\linewidth}
    \begin{itemize}[nosep,after=\strut, leftmargin=2em, itemsep=2pt]
        \item Created for educational purposes and featured in teaching videos on the \href{https://www.youtube.com/channel/UCkAFd86ZTxq6II8AIUcYTKw}{YouTube channel}.
        \item Focuses on low-level programming concepts, predominantly using the C programming language.
        \item Content includes tutorials, demonstrations, and hands-on exercises to facilitate learning in the field of low-level programming.
        \item The project is available on \href{https://github.com/schummLee/selfmade}{GitHub} to supplement and enhance the learning experience for viewers interested in delving into the intricacies of C and low-level programming.
    \end{itemize}
\end{minipage}
\end{tabularx}
essay 12 cjeck 11000
The examples are heavily commented so there is no separate page to describe them. Below are brief descriptions and order that I believe should be good for a beginner.
Introduction

    Hello World (code). A very simple example that shows how to create Const Ops that take scalar inputs and use StringJoin operator to output the concatentation result.

    Naming Ops (code). This simple example shows how to name your ops. This is optional but recommended practice for sophisticated graphs.

    Basic Operations (code). This example shows base math ops and usage of Placeholders with and without default values when running the session.

    Basic Tensors (code). A simple example to construct and inspect various types of tensors.

    Basic GraphDef (code). An example that shows how to use GraphDef and Session api. Also shown is how to use the op names to provide the inputs and extract the outputs from the session run.

    Basic I/O (code). An example to show how to use I/O API in tensorflow to read a file.
set(INTRODUCTION_PATH ${CMAKE_CURRENT_SOURCE_DIR})
set(INTRODUCTION_SRC_PATH  "${INTRODUCTION_PATH}/src" )

# this macro will help create the executables
# for various introduction applications
macro(add_introduction app_name app_path main_file)
    add_executable(intro-${app_name} ${app_path}/${main_file}.cc)
    target_link_libraries(
        intro-${app_name}
        PRIVATE
        third-party::tensorflow-cc
    )
endmacro()

# here simply call the macro for every sample file (the one that contains the main)
add_introduction(hello-world ${INTRODUCTION_SRC_PATH} hello-world)
add_introduction(naming-ops ${INTRODUCTION_SRC_PATH} naming-ops)
add_introduction(basic-operations ${INTRODUCTION_SRC_PATH} basic-operations)
add_introduction(basic-tensors ${INTRODUCTION_SRC_PATH} basic-tensors)
add_introduction(basic-graphdef ${INTRODUCTION_SRC_PATH} basic-graphdef)
add_introduction(basic-io ${INTRODUCTION_SRC_PATH} basic-io)


// testffi/libs/api.cpp#define EXPORT extern "C" __attribute__((visibility("default"))) __attribute__((used))#include <cstring>EXPORT
int add(int a, int b) {
   return a + b;
}EXPORT
char* capitalize(char *str) {
   static char buffer[1024];
   strcpy(buffer, str);
   buffer[0] = toupper(buffer[0]);
   return buffer;
}
